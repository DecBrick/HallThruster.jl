        - @enum ConservationLawType begin
        -     _ContinuityOnly
        -     _IsothermalEuler
        -     _EulerEquations
        - end
        - 
        - Base.@kwdef struct ConservationLawSystem
        3     type::ConservationLawType
        -     nvars::Int
        -     u::Union{Float64,Nothing}
        -     T::Union{Float64,Nothing}
        - end
        - 
        - nvars(c::ConservationLawSystem) = c.nvars
        - 
        3 function Base.show(io::IO, c::ConservationLawSystem)
        3     name = string(c.type)
        3     u = c.u
        3     T = c.T
        4     ustring = if isnothing(u)
        2         ""
        -     else
        4         "u = $u m/s"
        -     end
        5     Tstring = if isnothing(T)
        1         ""
        -     else
        5         "T = $T K"
        -     end
        6     argstring = join(filter(!isempty, [ustring, Tstring]), ", ")
        3     return print(io, name * "(" * argstring * ")")
        - end
        - 
        - """
        - 	ContinuityOnly
        - A `ConservationLawSystem` in which only continuity (mass conservation) is solved, while
        - velocity and temperature are held constant. Must specify a constant velocity (in m/s) and temperature (in K).
        - 
        - ```jldoctest;setup = :(using HallThruster: ConservationLawSystem, ContinuityOnly)
        - julia> equation = ContinuityOnly(u = 300, T = 500)
        - _ContinuityOnly(u = 300.0 m/s, T = 500.0 K)
        - ```
        - """
        2 function ContinuityOnly(; u, T)
        2     return ConservationLawSystem(; type=_ContinuityOnly, nvars=1, u=Float64(u),
        -                                  T=Float64(T))
        - end
        - ContinuityOnly(u, T) = ContinuityOnly(; u, T)
        - 
        - """
        - 	IsothermalEuler
        - A `ConservationLawSystem` in which only continuity and inviscid momentum are solved, while
        - temperature is held constant. Must specify a constant temperature (in K).
        - 
        - ```jldoctest;setup = :(using HallThruster: ConservationLawSystem, IsothermalEuler)
        - julia> equation = IsothermalEuler(T = 500)
        - _IsothermalEuler(T = 500.0 K)
        - ```
        - """
        2 function IsothermalEuler(; T)
        2     return ConservationLawSystem(; type=_IsothermalEuler, nvars=2, u=nothing, T=Float64(T))
        - end
        - IsothermalEuler(T) = IsothermalEuler(; T)
        - 
        - """
        - 	EulerEquations
        - A `ConservationLawSystem` for the inviscid Navier-Stokes equations, better known as the Euler equations.
        - Velocity and temperature are variable, so the values held in the ConservationLawSystem are set to zero
        - and subsequently unused.
        - 
        - ```jldoctest;setup = :(using HallThruster: ConservationLawSystem, EulerEquations)
        - julia> equation = EulerEquations()
        - _EulerEquations()
        - ```
        - """
        1 function EulerEquations()
        1     return ConservationLawSystem(; type=_EulerEquations, nvars=3, u=nothing, T=nothing)
        - end
